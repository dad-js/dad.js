// Generated by https://quicktype.io

import memoizee from "memoizee";
import { loadDataTable } from "../libs";
import { getItemPropertiesData } from "./itemProperty";
import path from "path";

interface DTItemInfo {
	Type: string;
	Name: string;
	Class: string;
	Properties: DTProperties;
}

interface DTProperties {
	Item: DTItem;
}

interface DTItem {
	IdTag: DTArmorType;
	OriginId: DTArtData;
	Name: DTFlavorText;
	FlavorText: DTFlavorText;
	ItemType: string;
	SlotType: DTArmorType;
	ArmorType: DTArmorType;
	RarityType: DTArmorType;
	MaxCount: number;
	CanDrop: boolean;
	CanSaveIntoDatabase: boolean;
	ArtData: DTArtData;
	SoundData: DTArtData;
	ItemHolderActorClass: DTItemHolderActorClass;
	InventoryWidth: number;
	InventoryHeight: number;
	WearingDelayTime: number;
	PrimaryProperty: DTArtData;
	SecondaryProperties: DTArtData[];
	Requirement: DTArtData;
	AdvPoint: number;
	ExpPoint: number;
	GearScore: number;
}

interface DTArmorType {
	TagName: string;
}

interface DTArtData {
	PrimaryAssetType: DTPrimaryAssetType;
	PrimaryAssetName: string;
}

interface DTPrimaryAssetType {
	Name: string;
}

interface DTFlavorText {
	Namespace: string;
	Key: string;
	SourceString: string;
	LocalizedString: string;
}

interface DTItemHolderActorClass {
	ObjectName: string;
	ObjectPath: string;
}

async function getMappedItemInfo(itemName: string) {
	const itemData = (await loadDataTable(`DT_Item/Item/${itemName.split(":")[1]}`)) as DTItemInfo;
	return await mapItemInfo(itemData);
}

export async function mapItemInfo(itemData: DTItemInfo) {
	const artData = await loadDataTable(
		`ArtData/${itemData.Properties.Item.ArtData.PrimaryAssetName}`,
	);
	const iconPath = artData.Properties.ItemIconTexture?.ObjectPath;

	return {
		name: itemData.Properties.Item.Name.LocalizedString,
		flavorText: itemData.Properties.Item.FlavorText?.LocalizedString,
		itemType: itemData.Properties.Item.ItemType,
		slotType: itemData.Properties.Item.SlotType?.TagName,
		itemTag: itemData.Properties.Item.IdTag.TagName,
		armorType: itemData.Properties.Item.ArmorType?.TagName,
		raritytype: itemData.Properties.Item.RarityType?.TagName,
		maxcount: itemData.Properties.Item.MaxCount,
		imageName: iconPath ? path.parse(iconPath).name : "",
		inventoryWidth: itemData.Properties.Item.InventoryWidth,
		inventoryHeight: itemData.Properties.Item.InventoryHeight,
		advPoints: itemData.Properties.Item.AdvPoint,
		expPoints: itemData.Properties.Item.ExpPoint,
		gearScore: itemData.Properties.Item.GearScore as number | undefined,
		primaryProperties:
			itemData.Properties.Item.PrimaryProperty &&
			(await getItemPropertiesData(
				itemData.Properties.Item.PrimaryProperty.PrimaryAssetName,
			)),
		secondaryProperties:
			itemData.Properties.Item.SecondaryProperties &&
			(await Promise.all(
				itemData.Properties.Item.SecondaryProperties.map((prop) => prop.PrimaryAssetName),
			)),
	};
}

export type ItemData = ReturnType<Awaited<typeof getMappedItemInfo>>;
export const getItemData = memoizee(getMappedItemInfo) as any as (
	itemName: string,
) => Promise<ItemData>;
