import memoizee from "memoizee";
import { loadDataTable } from "../libs";
import { getItemPropertyTypeData } from "./itemPropertyType";

// Generated by https://quicktype.io

interface DTItemProperty {
	Type: string;
	Name: string;
	Class: string;
	Properties: DTItemPropertyProperties;
}

interface DTItemPropertyProperties {
	Item: DTItemPropertyItem;
}

interface DTItemPropertyItem {
	ItemPropertyItemArray: DTItemPropertyItemArray[];
}

interface DTItemPropertyItemArray {
	PropertyTypeId: DTPropertyTypeID;
	MinValue: number;
	MaxValue: number;
	PropertyRate: number;
}

interface DTPropertyTypeID {
	PrimaryAssetType: DTPrimaryAssetType;
	PrimaryAssetName: string;
}

interface DTPrimaryAssetType {
	Name: string;
}

async function getMappedItemProperties(propertyItemName: string) {
	const primaryProperties = (await loadDataTable(
		`DT_ItemProperty/ItemProperty/${propertyItemName}`,
	)) as DTItemProperty;

	return await Promise.all(
		primaryProperties.Properties.Item.ItemPropertyItemArray.map(async (prop) => ({
			name: prop.PropertyTypeId.PrimaryAssetName,
			minVal: prop.MinValue,
			maxVal: prop.MaxValue,
			data: await getItemPropertyTypeData(prop.PropertyTypeId.PrimaryAssetName),
		})),
	);
}

export type ItemPropertiesData = ReturnType<Awaited<typeof getMappedItemProperties>>;

export const getItemPropertiesData = memoizee(getMappedItemProperties) as any as (
	itemName: string,
) => Promise<ItemPropertiesData>;
